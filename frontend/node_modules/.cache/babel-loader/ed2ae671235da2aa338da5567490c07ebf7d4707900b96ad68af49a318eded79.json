{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\WebDev\\\\Projects\\\\Tutorial Projects\\\\React Router\\\\12-adv-starting-project\\\\frontend\\\\src\\\\components\\\\pages\\\\Events.jsx\",\n  _s = $RefreshSig$();\nimport EventsList from '../EventsList';\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events' };\n    // eslint-disable-next-line no-throw-literal\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","Await","defer","json","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/PC/Documents/WebDev/Projects/Tutorial Projects/React Router/12-adv-starting-project/frontend/src/components/pages/Events.jsx"],"sourcesContent":["import EventsList from '../EventsList';\r\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\r\n\r\nfunction EventsPage() {\r\n  const { events } = useLoaderData();\r\n\r\n  return (\r\n    <Await resolve={events}>\r\n      {(loadEvents) => <EventsList events={loadEvents} />}\r\n    </Await>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: 'Could not fetch events' };\r\n    // eslint-disable-next-line no-throw-literal\r\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json({ message: 'Could not fetch events' }, { status: 500 });\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return defer({\r\n    events: loadEvents(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,eAAe;AACtC,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGL,aAAa,CAAC,CAAC;EAElC,oBACEE,OAAA,CAACL,KAAK;IAACS,OAAO,EAAED,MAAO;IAAAE,QAAA,EACnBC,UAAU,iBAAKN,OAAA,CAACN,UAAU;MAACS,MAAM,EAAEG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEZ;AAACR,EAAA,CARQD,UAAU;EAAA,QACEH,aAAa;AAAA;AAAAa,EAAA,GADzBV,UAAU;AAUnB,eAAeA,UAAU;AAEzB,eAAeK,UAAUA,CAAA,EAAG;EAC1B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,MAAMjB,IAAI,CAAC;MAAEkB,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOrB,KAAK,CAAC;IACXO,MAAM,EAAEG,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}